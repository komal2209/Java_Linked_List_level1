Find the first node of loop in linked list
Given a singly linked list of N nodes. Find the first node of the loop if the linked list has a loop. If a loop is present return the node data of the first node of the loop else return -1.

Example 1:
Input: 1->3->4->5
          |_____|

Output: 3
Explanation:
We can see that there exists a loop 
in the given linked list and the first
node of the loop is 3.
 

Example 2:
Input: 1->2->3->1

Output: -1
Explanation: No loop exists in the above
linked list.So the output is -1.
------------------------------------------------------
Time compexity=O(n)
Space complexity=O(n)
class Solution {
    //Function to find first node if the linked list has a loop.
    public static int findFirstNode(Node head){
        //code here
        
    HashSet<Node>set = new HashSet<>() ;
    Node curr=head;
    
    if(head==null)
    return 0;
    
    
    while(curr.next!=null)
    {
        if(set.contains(curr))
           return curr.data;
        else
             {set.add(curr);
             curr=curr.next;
            }
    }
   
   return -1;
    }
}