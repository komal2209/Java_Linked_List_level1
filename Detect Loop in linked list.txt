Detect Loop in linked list
Input:
N = 3
value[] = {1,3,4}
x(position at which tail is connected) = 2
Output: True
Explanation: In above test case N = 3.
The linked list with nodes N = 3 is
given. Then value of x=2 is given which
means last node is connected with xth
node of linked list. Therefore, there
exists a loop.
Example 2:

Input:
N = 4
value[] = {1,8,3,4}
x = 0
Output: False
Explanation: For N = 4 ,x = 0 means
then lastNode->next = NULL, then
the Linked list does not contains
any loop.
-------------------------------------------------Naive Approach --------------------------------

Time Complexity=O(n^2)
Space Complexity=O(1)

class Solution {
    //Function to check if the linked list has a loop.
    public static boolean detectLoop(Node head){
        // Add code here
        
        if(head.next==null)
        {
            return false;
        }
        if(head.next==head)
        {
            return true;
        }
        Node curr=head;
        int count=0;
        while(curr!=null)
        {
            Node next=curr.next;
            int res=0;
            Node temp=head;
            while(temp!=null && res<=count)
            {
                if(temp==next)
                {
                    return true;
                }
                else{
                    temp=temp.next;
                    res++;
                }
            }
            count++;
            curr=next;
        }
        return false;
    }
}
========================================================= Dummy Node approach ==============================================
Time Complexity=O(n)
Space Complexity=O(1)
class Solution {
    //Function to check if the linked list has a loop.
    public static boolean detectLoop(Node head){
        // Add code here
        
        if(head.next==null)
        {
            return false;
        }
        if(head.next==head)
        {
            return true;
        }
        Node curr=head;
        Node temp=new Node(0);
      
        while(curr!=null)
        {
           
           if(curr.next==null)
           {
               return false;
           } 
           if(curr.next==temp)
           {
               return true;
           }
          
          
               Node next=curr.next;
               curr.next=temp;
               curr=next;
                
           
        }
        return false;
    }
}
==========================================================HashMap Approach==============================================

Time Complexity=O(n)
Space Complexity=O(1)
class Solution {
    //Function to check if the linked list has a loop.
    public static boolean detectLoop(Node head){
        // Add code here
        if(head==null)
        {
            return false;
        }
        if(head.next==null)
        {
            return false;
        }
        Node curr= head;
        
        HashMap<Node,Integer> set=new HashMap<Node,Integer>(); 
        
        while(curr!=null)
        {
            if(set.containsKey(curr)==true)
                 return true;
            else
            {
            set.put(curr,1);
            curr=curr.next;
            }
        }
        
        return false;
    }
}

===================================================FLOYD HARE AND TORTOISE APPROACH============================================

Time Complexity=O(n)
Space Complexity=O(1)

class Solution {
    //Function to check if the linked list has a loop.
    public static boolean detectLoop(Node head){
        // Add code here
        
        if(head.next==null)
            return false;
        if(head.next==head)
            return true;
        
        Node Second=head;
        Node First=head;

        while(First!=null && First.next!=null)
        {
         First=First.next.next;
         if(First==Second)
           return true;  
         else
         Second=Second.next;
        }
        return false;
    }
}