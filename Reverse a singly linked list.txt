Reverse a singly linked list
Given a linked list of N nodes. The task is to reverse this list.

Example 1:
Input:
LinkedList: 1->2->3->4->5->6
Output: 6 5 4 3 2 1
Explanation: After reversing the list, 
elements are 6->5->4->3->2->1.

Example 2:
Input:
LinkedList: 2->7->8->9->10
Output: 10 9 8 7 2
Explanation: After reversing the list,
elements are 10->9->8->7->2.
------------------------------------
Time Complexity: O(N).
Auxiliary Space: O(N).

class Solution
{
    //Function to reverse a linked list.
    Node reverseList(Node head)
    {
        // code here
        if(head==null || head.next==null)
        return head;
       ArrayList<Integer> arr=new ArrayList<Integer>();
       for(Node curr=head; curr!=null;curr=curr.next)
       {
           arr.add(curr.data);
           
       }
       
       for(Node temp=head;temp!=null;temp=temp.next)
       {
        temp.data=arr.remove(arr.size()-1);   
       }
       return head;
    }
}

------------------------------------------------
Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

class Solution
{
    //Function to reverse a linked list.
    Node reverseList(Node head)
    {
        // code here
        if(head==null || head.next==null)
        return head;
        
        Node prev=null;
        Node curr=head;
        while(curr!=null)
        {
            Node nextnode=curr.next;
            curr.next=prev;
            prev=curr;
            curr=nextnode;
        }
        return prev;
    }
}
----------------------------------------------
class Solution
{
    //Function to reverse a linked list.
    Node reverseList(Node head)
    {
        // code here
        if(head==null || head.next==null)
        {
            return head;
        }
        
        Node curr=head;
        Node prev=null;
        Node next=null;
        while(curr!=null)
        {
        next=curr.next;
        curr.next=prev;
        prev=curr;
        curr=next;
        }
        return prev;
    }
}
