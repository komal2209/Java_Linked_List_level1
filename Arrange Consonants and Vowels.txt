Arrange Consonants and Vowels

Given a singly linked list of size N containing only English Alphabets. Your task is to complete the function arrangeC&V(), that arranges the consonants and vowel nodes of the list it in such a way that all the vowels nodes come before the consonants while maintaining the order of their arrival.

Input:
The function takes a single argument as input, the reference pointer to the head of the linked list. There will be T test cases and for each test case the function will be called separately.

Output:
For each test case output a single line containing space separated elements of the list.

User Task:
The task is to complete the function arrange() which should arrange the vowels and consonants as required.

Constraints:
1 <= T <= 100
1 <= N <= 100

Example:
Input:
2
6
a e g h i m
3
q r t

Output:
a e i g h m
q r t
-----------------------------------------------
TIME COMPLEXITY=O(N)
Space Complexity=O(V)+O(C)

V=Number of vowels present in Node.
C=Number of Consonants present in Node.

class Solution {
    
    public Node arrangeCV(Node head){
        //write code here and return the head of changed linked list
        if(head == null || head.next==null)
        return head;
        
        ArrayList<Character> vowels= new ArrayList<Character>();
        ArrayList<Character> consonats=new ArrayList<Character>();
       Node curr=head;
       while(curr!=null)
       {
           if(curr.data=='a'|| curr.data=='e' || curr.data=='i' || curr.data=='o' || curr.data== 'u')
           {
               vowels.add(curr.data);
           }
           else
           {
               consonats.add(curr.data);
           }
           curr=curr.next;
       }
       curr=head;
       Node headnode=head;
       for(char ch:vowels)
       {
           headnode.data=ch;
           headnode=headnode.next;
       }
    
       for(char ch:consonats)
       {
           headnode.data=ch;
           headnode=headnode.next;
       }
       
       return curr;
    }
    
    
}