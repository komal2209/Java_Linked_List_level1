Remove loop in Linked List
Example 1:

Input:
N = 3
value[] = {1,3,4}
X = 2
Output: 1
Explanation: The link list looks like
1 -> 3 -> 4
     ^    |
     |____|    
A loop is present. If you remove it 
successfully, the answer will be 1. 
--------------------------------------------------USING TWO THREE FUNCTION----------------------------------

class Solution
{
    
static Node detectLoop(Node head)
{
     if(head==null)
        return null;
        
            
        Node Second=head;
        Node First=head;
        Node temp=null;

        while(First!=null && First.next!=null)
        {
            First=First.next;
           if(First!=null)
           {
           First=First.next;
           }
            Second=Second.next;

            if(First==Second)
            {
                temp=Second;
                break;
            }
        }
        return temp;
}  

//To finding starting point of loop

static Node getStartingPoint(Node head)
{
    if(head==null)
    return null;
    
    Node intersectionPoint=detectLoop(head);

   if(intersectionPoint==null)
    return null;

    Node Second=head;
    
    while(Second!=intersectionPoint)
    {
        Second=Second.next;
        intersectionPoint=intersectionPoint.next;
        
    }
    return Second;
}


    //Function to remove a loop in the linked list.

    public static void removeLoop(Node head)
    {
        // code here
        // remove the loop without losing any nodes
        
        if(head==null)
        return;
        if(head.next==head)
        {
            head.next=null;
        }
        
        Node finalNode=getStartingPoint(head);
        Node curr=finalNode;
        while(curr.next!=finalNode)
        {
                curr=curr.next;
            
        }
        curr.next=null;
    }
}


--------------------------------------------In one function ------------------------------------

SPACE Complexity =O(1)

class Solution
{
    
 public static void removeLoop(Node head)
    {
     if(head==null)
        return;
        
        Node Second=head;
        Node First=head;
        
           // checking for loop
            while(First!=null && First.next!=null)
            {
                First=First.next.next;
                Second=Second.next;
    
                if(First==Second)
                {
                    break;
                }
            }
            
             // checking for no loop 
           if(Second!=First)
           return;
           
             // fnding headpoint
            Second=head;
            while(Second!=First)
            {
                Second=Second.next;
                First=First.next;
            }
            
            Node res=Second;
            
            while(res.next!=Second)
            {
                    res=res.next;
            
            }
                    res.next=null;
       }  

}

-----------------------------------------------------using one fuction ----------------------------------------------
Time Complexity =O(N)
Space Complexity =O(1)

class Solution
{
    
public static void removeLoop(Node head){
        Node slow = head;
        Node fast = head;
        
        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            
            if(slow == fast) {
               slow = head;
            
                // detected meet point
                while(fast != slow) {
                    fast = fast.next;
                    slow = slow.next;
                }
                
                while(fast.next != slow) {
                    fast = fast.next;
                }
                
                fast.next = null; 
            }
        }
    }
}
-------------------------------------------------------------using hashmap---------------------------------------------
Time Complexity =O(N)
Space Complexity =O(N)
class Solution
{
    
public static void removeLoop(Node head)
{
        Node  currNode=head;
        Node previousNode =null ;
        if(head==null)
           return; 

        HashMap<Node,Integer> set =new HashMap<Node,Integer>();
        while(currNode != null) 
        {
            
            if(set.containsKey(currNode)==true)
            {

                break;
            }
            else
            {
                previousNode=currNode;
               set.put(currNode,1); 
               currNode=currNode.next;
            }
        }
               previousNode.next=null;

    }
}
---------------------------------------------------------------------
Time Complexity =O(N)
Space Complexity =O(1)

class Solution
{
    //Function to remove a loop in the linked list.
    public static void removeLoop(Node head){
        Node slow= head,fast = head; 
      
        while (fast!=null && fast.next!=null) { 
            slow = slow.next; 
            fast = fast.next.next; 
            if (slow == fast) { 
                break; 
            } 
        } 
        if(slow!=fast)
            return;
        slow=head;
        while(slow!=fast){
            slow=slow.next;
            fast=fast.next;
        }
        while (fast.next != slow) {
            fast = fast.next;
        }
        fast.next=null;   
    }
}