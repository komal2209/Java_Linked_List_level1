Intersection Point in Y Shaped Linked Lists
Input:
LinkList1 = 3->6->9->15->30
LinkList2 = 10->15->30
common = 15->30->NULL
Output: 15


Example 2:

Input: 
Linked List 1 = 4->1->common
Linked List 2 = 5->6->1->common
common = 8->4->5->NULL
Output: 8
Explanation: 

4              5
|              |
1              6
 \             /
  8   -----  1 
   |
   4
   |
  5
  |
  NULL      


----------------------------------------------------------------------------------------------------------------------------------------------------------------
Time Complexity=O(N)
Space Complexity=O(1)

class Intersect
{
    //Function to find intersection point in Y shaped Linked Lists.
	int intersectPoint(Node head1, Node head2)
	{
         // code here
         
         if(head1==null)
        {
          return -1;  
        }
        if(head2==null)
        {
            return -1;
        }
        
        int count1=0;
        int count2=0;
        Node curr1=head1;
        Node curr2=head2;

//here we will count the toatl number of nodes present in linked list one.

       while(curr1!=null)
       {
           count1++;
         curr1=curr1.next;
       }

//here we will count the toatl number of nodes present in linked list two.

       while(curr2!=null)
       {
           count2++;
         curr2=curr2.next;
       }
       
       int finalcount=0;

//here we will check which linked list having more nodes.

       if(count1>count2)
       {
           finalcount=Math.abs(count1-count2);
       }
       else
       {
           finalcount=Math.abs(count2-count1);
       }
       curr1=head1;
       curr2=head2;
       int i=0;
       
//The linked list(l1) which is containg more nodes than the other linked list(l2) , we will left that much nodes in l1.
//                                         OR
//The linked list(l2) which is containg more nodes than the other linked list(l1) , we will left that much nodes in l2.

       if(count1>count2)
       {
           while(i<finalcount && curr1!=null)
           {
               curr1=curr1.next;
               i++;
           }
       }
       else
       {
         while(i<finalcount && curr2!=null)
           {
               curr2=curr2.next;
               i++;
           }
           
       }

 // After that we will start iteration of both linked list with same speed. at certain point they will meet.
   
       while(curr1!=null && curr2!=null)
       {
           if(curr1==curr2)
           {
               return curr1.data;
           }
           curr1=curr1.next;
           curr2=curr2.next;
       }
       
 //if they are not meet then we will return -1.
      
       return -1;
	}
}
---------------------------------------------------------------------using one traversal---------------------------------------------------------
Time Complexity=O(N)
Space Complexity=O(1)
class Intersect
{
    //Function to find intersection point in Y shaped Linked Lists.
	int intersectPoint(Node head1, Node head2)
	{
         // code here
         
         if(head1==null)
        {
          return -1;  
        }
        if(head2==null)
        {
            return -1;
        }
        
       
        Node curr1=head1;
        Node curr2=head2;

       while(curr1!=null && curr2!=null)
       {
           
         if(curr1==curr2)
         {
          return curr1.data;
         }
         
         else if(curr1.next!=null && curr2.next==null)
         {
             curr1=curr1.next;
             curr2=head1;
         }
         else if(curr2.next!=null && curr1.next==null )
         {
              curr2=curr2.next;
             curr1=head2;
         }
         else
         {
         curr1=curr1.next;
         curr2=curr2.next;
         }
        
       }
       
       return -1;
	}
}