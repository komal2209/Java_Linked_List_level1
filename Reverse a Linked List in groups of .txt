Reverse a Linked List in groups of given size.
Given a linked list of size N. The task is to reverse every k nodes (where k is an input to the function) in the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should be considered as a group and must be reversed (See Example 2 for clarification).

Example 1:

Input:
LinkedList: 1->2->2->4->5->6->7->8
K = 4
Output: 4 2 2 1 8 7 6 5 
Explanation: 
The first 4 elements 1,2,2,4 are reversed first 
and then the next 4 elements 5,6,7,8. Hence, the 
resultant linked list is 4->2->2->1->8->7->6->5.
Example 2:

Input:
LinkedList: 1->2->3->4->5
K = 3
Output: 3 2 1 5 4 
Explanation: 
The first 3 elements are 1,2,3 are reversed 
first and then elements 4,5 are reversed.Hence, 
the resultant linked list is 3->2->1->5->4.
-----------------------------------------------
Expected Time Complexity : O(N)
Expected Auxilliary Space : O(1)

class Solution
{
    public static Node reverse(Node node, int k)
    {
        //Your code here
          boolean isHead=true;
          Node curr=node;
          Node prevfirst=null;
          while(curr!=null)
          {
          Node first=curr; 
          int count=0;
          Node prev=null;
          while(curr!=null && count<k)
          {
              Node next=curr.next;
              curr.next=prev;
              prev=curr;
              curr=next;
              count++;
          }
          
          if(isHead)
          {
           node=prev;
           isHead=false;
          }
          else
          {
             prevfirst.next=prev;
          }
          prevfirst=first;
              
          }
         return node; 
    }
}
-----------------------------------------------------------------------------------------------------------------------------
Expected Time Complexity : O(N)
Expected Auxilliary Space : O(N)
class Solution
{
    public static Node reverse(Node node, int k)
    {
        //Your code here

          Node curr=node;
          int count=0;
          Node prev=null;
          Node next=null;
          while(curr!=null && count<k)
          {
               next=curr.next;
              curr.next=prev;
              prev=curr;
              curr=next;
              count++;
          }
          
          if(next!=null)
          {
          Node resthead=reverse(next,k);
          
          node.next=resthead;
          }
          
         return prev; 
    }
}


