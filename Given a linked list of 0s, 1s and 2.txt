Given a linked list of 0s, 1s and 2s, sort it.


------------------------------------------------------------------------using extra space(ArrayList)-------------
Time Complexity=O(nlogn)
Space Complexity=O(n)

class Solution
{
    //Function to sort a linked list of 0s, 1s and 2s.
    static Node segregate(Node head)
    {
        ArrayList<Integer> arr=new ArrayList<Integer>();
        Node curr=head;
        while(curr!=null)
        {
            arr.add(curr.data);
            curr=curr.next;
        }
        
        Collections.sort(arr);
        curr=head;
        for(int i=0;i<arr.size() && curr!=null;i++)
        {
           curr.data=arr.get(i);
           curr=curr.next;
        }
        
        return head;
    }
}
-----------------------------------------------------------------------------without using extra space-----------------------
Time Complexity=O(n)
Space Complexity=O(1)

class Solution
{
    //Function to sort a linked list of 0s, 1s and 2s.
    static Node segregate(Node head)
    {
        int countzero=0;
        int countone=0;
        int counttwo=0;
        Node curr=head;
        while(curr!=null)
        {
            if(curr.data==0)
            {
                countzero++;
            }
            else if(curr.data==1)
            {
                countone++;
            }
            
            else if(curr.data==2)
            {
                counttwo++;
            }
            curr=curr.next;
        }
        Node temp=head;
        curr=head;
        
         for(int i=0;i<countzero;i++)
         {
             if(curr!=null)
             {
                  curr.data=0;
                  curr=curr.next;
             }
        
          }
          
         for(int i=0;i<countone;i++)
         {
             if(curr!=null)
             {
                  curr.data=1;
                  curr=curr.next;
             }
          
         }
         
         for(int i=0;i<counttwo;i++)
         {
              if(curr!=null)
             {
                  curr.data=2;
                  curr=curr.next;
             }
         }
        return temp;
    }
}
--------------------------------------------------------using dummy node--------------------------------------

Time Complexity=O(n)
Space Complexity=O(1)

class Solution
{
    //Insert at tail
  static Node insertAtTail(Node tail,Node curr)
    {
      tail.next=curr;
      return curr;
        
    }
    
    //Function to sort a linked list of 0s, 1s and 2s.
    static Node segregate(Node head)
    {
        // add your code here
        
    Node zerohead=new Node(-1);
    Node zerotail=zerohead;
   
    Node onehead=new Node(-1);
    Node onetail=onehead;
    
    Node twohead=new Node(-1);
    Node twotail=twohead;
    
    Node curr=head;
    
    while(curr!=null)
    { 
        int value=curr.data;
        if(value==0)
        {
           zerotail=insertAtTail(zerotail,curr);
        }
        else if(value==1)
        {
          onetail=insertAtTail(onetail,curr);
            
        }
        else if(value==2)
        {
           twotail=insertAtTail(twotail,curr);
            
        }
        curr=curr.next;
    }
          


    //merge three linked list
    if(onehead.next!=null) // 1's list is not empty;
    {
        zerotail.next=onehead.next;
        onetail.next=twohead.next;

    }
    else // 1's list is  empty;
    {
      zerotail.next=twohead.next;

    }
    
      twotail.next=null;
    
    Node head1=zerohead.next;


    
    return head1;
    }
}