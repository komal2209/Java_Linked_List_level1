Pairwise Swap Nodes of linked list in Java.

Given a singly linked list of size N. The task is to swap elements in the linked list pairwise.
For example, if the input list is 1 2 3 4, the resulting list after swaps will be 2 1 4 3.
Note: You need to swap the nodes, not only the data. If only data is swapped then driver will print -1.

Example 1:

Input:
LinkedList: 1->2->2->4->5->6->7->8
Output: 
2 1 4 2 6 5 8 7
Explanation: 
After swapping each pair considering (1,2), (2, 4), (5, 6).. so on as pairs, we get 2, 1, 4, 2, 6, 5, 8, 7 as a new linked list.
Example 2:

Input:
LinkedList: 1->3->4->7->9->10->1
Output: 
3 1 7 4 10 9 1
Explanation: 
After swapping each pair considering (1,3), (4, 7), (9, 10).. so on as pairs, we get 3, 1, 7, 4, 10, 9, 1 as a new linked list.
-------------------------------------------------------------------------using data replacement-------------------------------------------------------------------------
Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

class Solution {
    // Function to pairwise swap elements of a linked list.
    // It should returns head of the modified list
   public Node pairwiseSwap(Node head)
    {
        // code here
        if(head==null || head.next==null)
        {
           return head; 
        }
        
        Node curr=head;
        
        while(curr!=null && curr.next!=null)
        {
            Node curr_next = curr.next.next;
            int temp=curr.data;
            curr.data=curr.next.data;
            curr.next.data=temp;
            curr =curr_next;
        }
       return  head;
    }
}

---------------------------------------------------------------------------without using data replacement(using dummy node)-----------------------------------------------------------------
Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

class Solution {
    // Function to pairwise swap elements of a linked list.
    // It should returns head of the modified list
   public Node pairwiseSwap(Node head)
    {
        // code here
        if(head==null || head.next==null)
        {
           return head; 
        }
        
        Node curr=head;
        Node startnode=new Node(-1);
        Node tailnode=startnode;
        while(curr!=null && curr.next!=null)
        {
            Node curr_next = curr.next.next;
            curr.next.next=null;
            tailnode.next = curr.next;
            curr.next=null;
            tailnode.next.next = curr;
            tailnode=curr;
            
            curr =curr_next;
        }
        tailnode.next=curr;
       return  startnode.next;
    }
}
----------------------------------------------------------------------------without using dummy node---------------------------------------------------------------------------------------
Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1)

class Solution {
    // Function to pairwise swap elements of a linked list.
    // It should returns head of the modified list
   public Node pairwiseSwap(Node head)
    {
        // code here
        if(head==null || head.next==null)
        {
           return head; 
        }
        
        Node curr=head.next.next;
        Node prev=head;
        head=head.next;
        head.next=prev;
        
        while(curr!=null && curr.next!=null)
        {
            Node curr_next = curr.next.next;
            prev.next=curr.next;
            prev.next.next=curr;
            prev=curr;
            curr =curr_next;
        }
        prev.next=curr;
       return  head;
    }
}