Rearrange a linked list

Given a singly linked list, the task is to rearrange it in a way that all odd position nodes are together and all even positions node are together.
Assume the first element to be at position 1 followed by second element at position 2 and so on.
Note: You should place all odd positioned nodes first and then the even positioned ones. (considering 1 based indexing). Also, the relative order of odd positioned nodes and even positioned nodes should be maintained.

Example 1:

Input:
LinkedList: 1->2->3->4
Output: 1 3 2 4 
Explanation: 
Odd elements are 1, 3 and even elements are 
2, 4. Hence, resultant linked list is 
1->3->2->4.
Example 2:

Input:
LinkedList: 1->2->3->4->5
Output: 1 3 5 2 4 
Explanation: 
Odd elements are 1, 3, 5 and even elements are
2, 4. Hence, resultant linked list is
1->3->5->2->4.
-------------------------------------------------------------------------------------------------------------------------------------------------------------
Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

class Solution
{

   // Should rearrange given linked list such that all even
   // positioned Nodes are before odd positioned.
   // Returns nothing
    void rearrangeEvenOdd(Node head)
    {
          //  The task is to complete this method
            Node  oddStart=head;
       
     Node  odd=head;
     Node  even=head.next; Node  evenstart=head.next;
       
       while(even!=null && even.next!=null)
       {
           
           odd.next=even.next;
           odd=odd.next;
           even.next=odd.next;
           even=even.next;
           
       }
        
       
     
       odd.next=evenstart;
       

        return;
     }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

class Solution
{
    void rearrangeEvenOdd(Node head)
    {
        if(head==null ||head.next==null)
        {
            return;
        }
        Node odd = head;
        Node evenStart = head.next;
        Node even = head.next;
        Node curr=even.next;
        while (curr!= null && curr.next!=null)
        {
            odd.next = curr;
            even.next = curr.next;
            odd=odd.next;
            even = even.next;
            curr = curr.next.next;
        }
        
        if (curr != null)
        {
            odd.next = curr;
            odd=odd.next;
        }
        
        odd.next = evenStart; // Corrected line
        even.next=null;
        
        return;
    }
}
