Add two numbers represented by linked lists.

Example 1:

Input:
N = 2
valueN[] = {4,5}
M = 3
valueM[] = {3,4,5}
Output: 3 9 0  
Explanation: For the given two linked
list (4 5) and (3 4 5), after adding
the two linked list resultant linked
list will be (3 9 0).
Example 2:

Input:
N = 2
valueN[] = {6,3}
M = 1
valueM[] = {7}
Output: 7 0
Explanation: For the given two linked
list (6 3) and (7), after adding the
two linked list resultant linked list
will be (7 0).
----------------------------------------------------
Expected Time Complexity: O(N+M)
Expected Auxiliary Space: O(Max(N,M)) for the resultant list.

class Solution{
    //Function to add two numbers represented by linked list.
    
    static Node reverse(Node head)
    {
        if(head==null || head.next==null)
        {
            return head;
        }
        
        Node curr=head;
        Node prev=null;
        Node next=null;
        while(curr!=null)
        {
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
            
        }
        return prev;
        
    }
    
 

    
    static Node addTwoLists(Node first, Node second)
    {
      
        //reverse linked list
        
        first=reverse(first);
        second=reverse(second);
        
       
      ArrayList<Integer> add2list=new ArrayList<Integer>();
      
        int carry=0;
        while(first !=null && second!=null)
        {
            
            int sum=carry+first.data+second.data;
            int digit=sum%10;
            add2list.add(digit);
            carry=sum/10;
            
            first=first.next;
            second=second.next;
        }
        
        while(first!=null)
        {
            int sum=carry+first.data;
            int digit=sum%10;
            add2list.add(digit);

             carry=sum/10;
            
            first=first.next;
        }
        
         while(second!=null)
        {          
             int sum=carry+second.data;
             int digit=sum%10;
            add2list.add(digit);
             carry=sum/10;
        
            second=second.next;
        }
        while(carry!=0)
        {
             int sum=carry;
             int digit=sum%10;
            add2list.add(digit);
             carry=sum/10;
        }
        
        Collections.reverse(add2list);

        Node mergall = new Node(-1);
        Node temp = mergall;
        for(Integer k : add2list){
            Node newNode = new Node(k);
            temp.next = newNode;
            temp = temp.next;
        }
        return mergall.next;
    
  }
}

----------------------------------------------------------------
Expected Time Complexity: O(N+M)
Expected Auxiliary Space: O(Max(N,M)) for the resultant list.

class Solution{
    //Function to add two numbers represented by linked list.
    
    static Node reverse(Node head)
    {
        if(head==null || head.next==null)
        {
            return head;
        }
        
        Node curr=head;
        Node prev=null;
        Node next=null;
        while(curr!=null)
        {
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
            
        }
        return prev;
        
    }
    
    static Node addTwoLists(Node first, Node second)
    {
      
        //reverse linked list
        
        first=reverse(first);
        second=reverse(second);
        
       
      ArrayList<Integer> add2list=new ArrayList<Integer>();
      
        int carry=0;
        while(first !=null || second!=null || carry!=0)
        {
            
            int val1=0;
            if(first!=null)
              val1=first.data;
            
            int val2=0;
            if(second!=null)
            val2=second.data;
          
             int sum=carry+val1+val2;
            int digit=sum%10;
            add2list.add(digit);
            carry=sum/10;
          
            if(first!=null)
                first=first.next;
            
            if(second!=null)
                second=second.next;

            
        }
        
        Collections.reverse(add2list);

        Node mergall = new Node(-1);
        Node temp = mergall;
        for(Integer k : add2list){
            Node newNode = new Node(k);
            temp.next = newNode;
            temp = temp.next;
        }
        return mergall.next;
    
  }
}