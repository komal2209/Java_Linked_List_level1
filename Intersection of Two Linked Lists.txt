Intersection of Two Linked Lists
Given two linked lists, the task is to complete the function findIntersection(), that returns the intersection of two linked lists. Each of the two linked list contains distinct node values.

Example 1:

Input:
LinkedList1: 9->6->4->2->3->8
LinkedList2: 1->2->8->6
Output: 6 2 8
------------------------------------------------------------------------------------------------------------------------------
Expected time complexity: O(m+n)
Expected auxiliary space: O(m+n)

class Solution
{
    public static Node findIntersection(Node head1, Node head2)
    {
        // add your code here
        // return the head of intersection list
        
        if(head1==null)
        {
          return head2;  
        }
        if(head2==null)
        {
            return head1;
        }
        
        HashSet<Integer> set=new  HashSet<Integer>();
        ArrayList<Integer> listOfMidPoint=new  ArrayList<Integer>();
        
        Node curr1=head1;

        while(head2!=null)
       {
         set.add(head2.data);
         head2=head2.next;
       }
       
       while(curr1!=null)
       {
           if(set.contains(curr1.data)==true)
           {
               listOfMidPoint.add(curr1.data);
           }
           curr1=curr1.next;
       }
       
       curr1=head1;
       for(int i=0;i<listOfMidPoint.size();i++)
       {
        curr1.data=listOfMidPoint.get(i);
        if(i==listOfMidPoint.size()-1)
        {
            break;
        }
        curr1=curr1.next;
        
       }
       curr1.next=null;
       
       return head1;
    }
}