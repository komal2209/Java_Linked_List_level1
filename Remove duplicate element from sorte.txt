Remove duplicate element from sorted Linked List

Given a singly linked list consisting of N nodes. The task is to remove duplicates (nodes with duplicate values) from the given list (if exists).
Note: Try not to use extra space. The nodes are arranged in a sorted way.

Example 1:
Input:
LinkedList: 2->2->4->5
Output: 2 4 5
Explanation: In the given linked list 
2 ->2 -> 4-> 5, only 2 occurs more 
than 1 time. So we need to remove it once.

Example 2:
Input:
LinkedList: 2->2->2->2->2
Output: 2
Explanation: In the given linked list 
2 ->2 ->2 ->2 ->2, 2 is the only element
and is repeated 5 times. So we need to remove
any four 2.
----------------------------------------------------------------------------------------------------------------------
Time Complexity=O(n)
Space Complexity=O(1)

class GfG
{
    //Function to remove duplicates from sorted linked list.
    Node removeDuplicates(Node head)
    {
	// Your code here	
	if(head==null)
	return null;
	
	Node current=head;
	
	while(current.next!=null)
	{
	    if(current.data==current.next.data)
	    {
	        current.next=current.next.next;
	    }
	    else
	    {
	        current=current.next;
	    }
	}
	return head;
	
    }
}